/*************************************************************************************************\
* Наименование: Базовый объект работы с ландшафтами                                               *
* Контур/Модуль: Перенос данных по ландшафтам                                                     *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *

\*************************************************************************************************/

#include Query.vih
#include LANDSCAPES_BASE.vih

//************************************************************
const
end;

#component "C_LANDSCAPES"
Interface Landscapes_BASE 'Ландшафты. Базовый объект';
create view
var
     _logLS_OUT : string;
     _needlog : boolean;
     _LongStringLog
   , _serviceLog    : TPTR;
     _curKontrur : comp;
from
   Landscapes          LS
 , Landscape_package   LS_pkg
 , Landscape_stat_hstr LS_Stat_hstr
 , Landscape_pckg_obj  LS_pkg_obj
 , Landscape_pckg_data LS_pkg_data
 , Landscape_pckg_term LS_pkg_term

 , JRN_Publication_term JRN_TERM
 , Landscapes          LS_select

 where ((      LS.nrec == LS_pkg.cLandscapes
       and LS_pkg.nrec == LS_Stat_hstr.cLandscape_package
       and LS_pkg.nrec == LS_pkg_obj.cLandscape_package
   and LS_pkg_obj.nrec == LS_pkg_data.cLandscape_pckg_obj
   and LS_pkg_obj.nrec == LS_pkg_term.cLandscape_pckg_obj
  and LS_pkg_term.cJRN_Publicationterm == JRN_TERM.nrec
 ))
 condition CurKontur LS_select.nrec <>  _curKontrur
;


Function GenerateNewFile: string; {
 result := GetStringParameter('Files','OutputFilesDirectory',0)+ '\Landscapes_'+DateToStr(cur_date,'YYYYMMDD')+'_'+timetostr(cur_time,'HHMMSS-SSS');
}

function GetLogFile_debug: string; {
  if _logLS_OUT = ''
   then _logLS_OUT := GenerateNewFile+'.log';
  result := _logLS_OUT;
}
Procedure MyLog(_str: string);{
//    LogStrToFile(GetLogFile_debug, DateToStr(cur_date,'YYYYMMDD')+'_'+timetostr(cur_time,'HHMMSS') + ': ' + _str); // debug
  if not _needlog then exit;
  _str := DateToStr(cur_date,'YYYYMMDD')+'_'+timetostr(cur_time,'HHMMSS') + ': '+_str + ''#13'';
  HttpConnect_AddValueToLongString(_serviceLog, _str, _LongStringLog);
}

Procedure MysqlAddStr(var query_handle: tptr; add_query_str: string); {
   sqlAddStr(query_handle, add_query_str);
   MyLog('sql: ' + add_query_str);
} //Function MysqlAddStr(var query_handle: longInt; add_query_str: string): longInt;

function GetLogFile : string; {
  _logLS_OUT := GenerateNewFile+'.log';
  HttpConnect_SaveToFileEx(_serviceLog, _LongStringLog, _logLS_OUT, cpUTF8, false);
  result := _logLS_OUT;
}
procedure disableLog; {
  HttpConnect_DestroyLongString(_serviceLog, _LongStringLog);
  HttpConnect_Free(_serviceLog);
  set _needlog := false;
}
procedure enableLog; {
   disableLog;
  _serviceLog    := HttpConnect_CreateEx('http://ya.ru', '', '', true);
  _LongStringLog := HttpConnect_CreateLongString(_serviceLog);
  set _needlog := true;
}

function encrypt(_str:string; _salt : word = 11) : string; {
  var _strres : string = '';
  var _i : byte = 1;
  while _i <= length(_str) {
     _strres :=_strres + chr(ord(char(substr(_str,_i,1))) + _i + _salt);
     _i++;
   }
   result := _strres;
}

function decrypt(_str:string; _salt : word = 11) : string; {
  var _strres : string = '' ;
  var _i : byte = 1;
  while _i <= length(_str) {
     _strres := _strres + chr(ord(char(substr(_str,_i,1))) - _i - _salt);
     _i++;
   }
   result := _strres;
}

Window winSelectKontur 'Выбор контура', cyan;
 browse brSelectKontur;
  table LS_select;
   Fields
    LS_select.code         'Код' : [3] , Protect, nopickbutton, #colorneed(TRIM(LS_select.code)='');
    LS_select.name         'Наименование' : [10] , Protect, nopickbutton, #colorneed(TRIM(LS_select.name)='');
    LS_select.description  'Описание' : [10] , Protect, nopickbutton;
    LS_select.httpaddress  'Адрес' : [8] , Protect, nopickbutton, #colorneed(TRIM(LS_select.httpaddress)='');
    LS_select.port         'Порт' : [3] , Protect, nopickbutton;
    LS_select.cResieptSys  'Контур-приемник' : [10] , Protect, nopickbutton;
    LS_select.WhenActive   'Последний опрос' : [5] , Protect, nopickbutton;
 end;
end;
windowevent winSelectKontur;
 cmdefault: {
   closewindowex(winSelectKontur, cmDefault)
 }
end;

function SelectKontrur(__curKontrur : comp) : comp; {
  result := 0h;
  PopConditionForLeave(tcCurKontur, tnLS_select);
  set _curKontrur := __curKontrur;
  PushConditionForLeave(tcCurKontur, tnLS_select);
  if RunWindowModal(winSelectKontur) = cmDefault {
    result := LS_select.nrec;
  }
 PopConditionForLeave(tcCurKontur, tnLS_select);
}
handleevent
cmcheckfield: {
  updatetable;
}
end;
end.
